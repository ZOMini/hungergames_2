Тестовые задания для соискателя

Ссылку на выполненное задание нужно отправить на почту hungergames@proninteam.ru до 10:00 мск 2 июля (воскресенье).
  Коммиты после дедлайна запрещены
Тестовое задание - написать приложение на flask 2.2.3 (ориентировочное время выполнения - 32-40 часов)
Описание приложения: приложение разрабатывается с помощью фреймворка flask, работает с базой данных PostrgeSQL версии 14.7,
  имеет REST API и веб интерфейсы. 
Цель приложения: каталогизация и структурирование информации по различным веб-ресурсам, а также мониторинг их доступности.
  Мониторинг должен проводиться регулярно, по расписанию.
  По каждому ресурсу нужно также хранить последний статус код ответа и статус "доступен/недоступен".
  Если ресурс недоступен в течении времени, определенного в конфигурации приложения, его нужно удалять из наблюдения.

1. API-интерфейс. Приложение принимает GET и POST запросы: 
a. POST запрос №1 должен содержать в теле ссылку на какой-либо веб-ресурс.
  Приложение должно обработать полученную ссылку, разложить ее на протокол, домен, доменную зону и путь.
  Если в ссылке присутствуют параметры - преобразовать их в словарь.
  Полученные данные нужно сохранить в таблице базы данных, присвоив уникальный идентификационный номер (uuid).
  Возвращать пользователю ответ в формате json с разложенными данными и статусом обработки.
  Если пользователь прислал не ссылку - сообщать ему об этом в ответе. 
b. POST запрос №2 должен содержать в себе zip архив с csv файлом с перечнем ссылок 
  (формат файла - каждая новая строка одна ссылка). Все ссылки нужно обрабатывать по образцу POST запроса №1,
  а также обработка должна выполняться в фоновом режиме/асинхронно. Ответ пользователю должен возвращаться очень быстро.
  В ответ добавить общий статус обработки файла (количество обрабатываемых ссылок, количество ошибок, количество ссылок,
  направленных на сохранение в БД). 
c. POST запрос №3 должен принимать uuid ресурса и картинку (предполагается скриншот сайта).
  Скриншот хранится в БД в таблице ресурсов. 
d. GET запрос №1 должен выводить все сохраненные ссылки из БД с последним статус-кодом ответа ресурса для каждой ссылки
  (добавить возможность выборки по доменной зоне, id, uuid, доступности).
  Добавить возможность пагинации json-ответа с целью снижения нагрузки на сервер. 
e. GET запрос №2 возвращает последние 50 строчек лог-файла (см. п.2)
  (количество строчек должно быть настраиваемо в конфигурации системы). 

2. Логирование. Приложение должно проводить логирование своей работы
  с ротацией лог-файлов при достижении определенного размера файла (1 мегабайт).
  Необходимо логировать все полученные запросы и ответы приложения, информацию о добавлении в БД новой записи,
  либо об изменении существующих.
  Также нужно логировать результаты опроса статус кодов сайтов - записывать результат по каждому сайту отдельно и общий итог каждой проверки. 

3. Веб-интерфейс. Требуется реализовать 5 веб-страниц для приложения.
  При вёрстке страниц требуется использовать фреймворк Bootstrap5.
  Постараться выдержать единый концепт оформления страниц и реализовать адаптивную верстку с помощью Bootstrap5.
  Добавить навигацию по страницам (меню).
Если вы владеете знаниями JavaScript - добавьте интерактивные уведомления на веб-страницах по результату выполнения каких-либо действий.
  Иначе используйте для коротких уведомлений функционал flask flash. 
a. Страница 1. Реализовать веб-страницу, содержащую формы для добавления в приложение новых веб-ресурсов.
  Формы должны добавлять веб-ресурсы как поштучно, так и загрузкой файла. Формат файла тот же, что и для API интерфейса.
b. Страница 2. Реализовать веб-страницу с таблицей, отображающую все ссылки из базы данных с разбивкой на страницы
  (пагинация, по 10 элементов на страницу). Также веб-страница должна содержать элементы управления - поиск по доменному имени,
  возможность фильтрования по доменной зоне и статусу доступности, а также удаление конкретного элемента из таблицы и базы данных соответственно. 
c. Страница 3. Реализовать веб-страницу, отображающую строки из лог-файла.
  Отображение должно быть динамическим (при обновлении файла - обновляется и содержимое веб-страницы).
  По клику на кнопку "скачать логи" скачивается файл с отображаемыми строчками лога в формате pdf. 
d. Страница 4. Лента новостей. На эту страницу динамически выводится информация об изменениях: изменился код ответа сайта,
  ресурс был добавлен в базу, ресурс был удален из базы и т.д. 
e. Страница 5. Страница ресурса. Выводятся все данные по ресурсу из БД, картинка (если есть), лента с новостями по ресурсу. 

4. Авторизация (Необязательное, бонусное задание).
  Добавить в приложение авторизацию пользователей по токенам для API и по паролю для веб-страниц,
  дописать необходимые эндпойнты и шаблоны для авторизации и завершения сессии.
  Функционал, описанный в пунктах 1-3 сделать доступным только для авторизованных пользователей.
  Логировать авторизацию, завершение сессии и попытки несанкционированного доступа. 

5. Дистрибуция и контейнеризация.
  Код приложения должен упаковываться в docker-контейнер и автоматически запускаться при старте контейнера.
  Данные, необходимые для конфигурирования приложения должны считываться из yaml-файла.
  Приложение должно быть залито на github в приватный репозиторий. 
  В проекте должен быть файл README с описанием проекта, эндпойтами и пошаговой инструкцией по разворачиванию и запуску проекта.